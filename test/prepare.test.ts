import {
  parseSchema,
  prepareCredentialTree,
  prepareCredentialTreeArr,
} from "../";
import { beforeAll, describe, expect, test, vi } from "vitest";

describe("prepareCredentialTree", () => {
  beforeAll(() => {
    vi.mock("ethers", async (importOriginal) => {
      const mod = (await importOriginal()) as object;
      return {
        ...mod,
        randomBytes() {
          return Buffer.from([
            0xa9, 0x6c, 0x9a, 0x56, 0xdc, 0x36, 0xc7, 0x70, 0xd8, 0xc7, 0xb3,
            0x71, 0x3c, 0x7c, 0xe8, 0xcd, 0x06, 0x89, 0x80, 0x85, 0x48, 0x48,
            0x7f, 0xbe, 0x35, 0x12, 0xa6, 0x48, 0x09, 0xe6, 0x8c, 0xdc,
          ]);
        },
      };
    });
  });

  test("complex", () => {
    const schema =
      "(address walletAddress, uint8 reputation, (uint8 score, bool ok)[] nested)[] stats, bytes32 ranking, bool[] isPrivate";

    const data = {
      ranking:
        "0x2800000000000000000000000000000000000000000000000000000000000000",
      isPrivate: [true, false],
      stats: [
        {
          walletAddress: "0x2Ca97ce4182617f300a5C2b927AFbd557b0783fD",
          reputation: 8,
          nested: [
            { score: 1, ok: true },
            { score: 3, ok: false },
          ],
        },
        {
          walletAddress: "0x669387271AA2589673BE62956083792034bc6bE4",
          reputation: 12,
          nested: [
            { score: 2, ok: false },
            { score: 4, ok: true },
          ],
        },
      ],
    };

    const expected = [
      [
        "(address walletAddress, uint8 reputation, (uint8 score, bool ok)[] nested)[] stats",
        "stats",
        "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000002ca97ce4182617f300a5c2b927afbd557b0783fd0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000669387271aa2589673be62956083792034bc6be4000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001",
        "0xa96c9a56dc36c770d8c7b3713c7ce8cd0689808548487fbe3512a64809e68cdc",
      ],
      [
        "bytes32 ranking",
        "ranking",
        "0x2800000000000000000000000000000000000000000000000000000000000000",
        "0xa96c9a56dc36c770d8c7b3713c7ce8cd0689808548487fbe3512a64809e68cdc",
      ],
      [
        "bool[] isPrivate",
        "isPrivate",
        "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
        "0xa96c9a56dc36c770d8c7b3713c7ce8cd0689808548487fbe3512a64809e68cdc",
      ],
    ];

    expect(prepareCredentialTree(schema, data)).toStrictEqual(expected);
  });

  test("simple", () => {
    const schema =
      "uint32 stargazers, (string name, uint32 stargazers, uint32 commits, uint32 totalCommits)[] repositories";

    const data = {
      stargazers: 10,
      repositories: [
        {
          name: "foo",
          stargazers: 4,
          commits: 100,
          totalCommits: 200,
        },
        {
          name: "bar",
          stargazers: 6,
          commits: 10,
          totalCommits: 150,
        },
      ],
    };

    const expected = [
      [
        "uint32 stargazers",
        "stargazers",
        "0x000000000000000000000000000000000000000000000000000000000000000a",
        "0xa96c9a56dc36c770d8c7b3713c7ce8cd0689808548487fbe3512a64809e68cdc",
      ],
      [
        "(string name, uint32 stargazers, uint32 commits, uint32 totalCommits)[] repositories",
        "repositories",
        "0xc80000000000000000000000000000000000000000000000000000000000000003666f6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000009600000000000000000000000000000000000000000000000000000000000000036261720000000000000000000000000000000000000000000000000000000000",
        "0xa96c9a56dc36c770d8c7b3713c7ce8cd0689808548487fbe3512a64809e68cdc",
      ],
    ];

    expect(prepareCredentialTree(schema, data)).toStrictEqual(expected);
  });

  test("minimal", () => {
    const schema =
      "uint32 stargazers, (string,uint32,uint32,uint32)[] repositories";

    const data = {
      stargazers: 10,
      repositories: [
        ["foo", 4, 100, 200],
        ["bar", 6, 10, 150],
      ],
    };

    const expected = [
      [
        "uint32 stargazers",
        "stargazers",
        "0x000000000000000000000000000000000000000000000000000000000000000a",
        "0xa96c9a56dc36c770d8c7b3713c7ce8cd0689808548487fbe3512a64809e68cdc",
      ],
      [
        "(string, uint32, uint32, uint32)[] repositories",
        "repositories",
        "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000000000000000003666f6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000009600000000000000000000000000000000000000000000000000000000000000036261720000000000000000000000000000000000000000000000000000000000",
        "0xa96c9a56dc36c770d8c7b3713c7ce8cd0689808548487fbe3512a64809e68cdc",
      ],
    ];

    expect(prepareCredentialTree(schema, data)).toStrictEqual(expected);
  });

  test("incorrect", () => {
    expect(() => {
      parseSchema("uint32 stargazers, (string,uint32,uint32,uint32)[]");
    }).toThrowError(
      "SchemaParsingError: first-class properties must have a name",
    );

    expect(() => {
      parseSchema("uint32, (string,uint32,uint32,uint32)[]");
    }).toThrowError(
      "SchemaParsingError: first-class properties must have a name",
    );

    expect(() => {
      parseSchema("uint32, (string,uint32,uint33)[]");
    }).toThrowError("SchemaParsingError: invalid schema");

    let inputs = ["hello world", "hello[] world", "(type[] name)"];
    for (const input of inputs) {
      expect(() => {
        parseSchema(input);
      }).toThrowError("SchemaParsingError: invalid schema");
    }

    inputs = ["(string name, uint32 age)", "uint32[]"];
    for (const input of inputs) {
      expect(() => {
        parseSchema(input);
      }).toThrow("SchemaParsingError: first-class properties must have a name");
    }
  });
});

describe("prepareCredentialTreeArr", () => {
  beforeAll(() => {
    vi.mock("ethers", async (importOriginal) => {
      const mod = (await importOriginal()) as object;
      return {
        ...mod,
        randomBytes() {
          return Buffer.from([
            0xa9, 0x6c, 0x9a, 0x56, 0xdc, 0x36, 0xc7, 0x70, 0xd8, 0xc7, 0xb3,
            0x71, 0x3c, 0x7c, 0xe8, 0xcd, 0x06, 0x89, 0x80, 0x85, 0x48, 0x48,
            0x7f, 0xbe, 0x35, 0x12, 0xa6, 0x48, 0x09, 0xe6, 0x8c, 0xdc,
          ]);
        },
      };
    });
  });

  test("normal", () => {
    const schema =
      "string name, uint32 stargazers, (string name, uint32 stargazers, uint32 commits, uint32 totalCommits)[] contributedRepositories";
    expect(
      prepareCredentialTreeArr(schema, [
        {
          type: "organizations",
          name: "acme",
          stargazers: 17,
          contributedRepositories: [
            {
              name: "acme/1",
              commits: 3,
              stargazers: 31387,
              totalCommits: 37324,
            },
            {
              name: "acme/2",
              commits: 1,
              stargazers: 2890,
              totalCommits: 14831,
            },
            {
              name: "acme/3",
              commits: 2,
              stargazers: 5467,
              totalCommits: 785,
            },
          ],
        },
        {
          type: "organizations",
          name: "qux",
          stargazers: 14,
          contributedRepositories: [
            {
              name: "qux/4",
              commits: 1,
              stargazers: 2440,
              totalCommits: 171,
            },
          ],
        },
      ]),
    ).toStrictEqual([
      [
        "(string name, uint32 stargazers, (string name, uint32 stargazers, uint32 commits, uint32 totalCommits)[] contributedRepositories)",
        "acme",
        "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000461636d650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000007a9b000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000091cc000000000000000000000000000000000000000000000000000000000000000661636d652f31000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000b4a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000039ef000000000000000000000000000000000000000000000000000000000000000661636d652f3200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000155b00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000311000000000000000000000000000000000000000000000000000000000000000661636d652f330000000000000000000000000000000000000000000000000000",
        "0xa96c9a56dc36c770d8c7b3713c7ce8cd0689808548487fbe3512a64809e68cdc",
      ],
      [
        "(string name, uint32 stargazers, (string name, uint32 stargazers, uint32 commits, uint32 totalCommits)[] contributedRepositories)",
        "qux",
        "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000aab00000000000000000000000000000000000000000000000000000000000000057175782f34000000000000000000000000000000000000000000000000000000",
        "0xa96c9a56dc36c770d8c7b3713c7ce8cd0689808548487fbe3512a64809e68cdc",
      ],
    ]);
  });
});
